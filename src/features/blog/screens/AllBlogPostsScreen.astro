---
import Heading from '@/components/Heading.astro';
import {
  FilteredPostsList,
  type PostDataForFilter,
} from '@/features/blog/components/FilteredPostsList';
import { BlogPostCard } from '@/features/blog';
import type { LanguageCode } from '@/i18n/ui';
import { ui } from '@/i18n/ui';
import BaseLayout from '@/layouts/BaseLayout.astro';
import { type CollectionEntry as AstroCollectionEntry } from 'astro:content';
import { EmptyState } from '@/components/empty-state';

type Props = {
  posts: AstroCollectionEntry<'blog'>[];
  lang: LanguageCode;
};

const { posts, lang } = Astro.props;

const initialSearchQuery = Astro.url.searchParams.get('q') || '';
const initialTag = Astro.url.searchParams.get('tag') || '';

const texts = ui[lang].blogPage;

function transformPostForClientFilter(
  post: AstroCollectionEntry<'blog'>
): PostDataForFilter {
  return {
    id: post.id,
    slug: post.id ?? '',
    title: post.data.title,
    description: post.data.description || '',
    tags: post.data.tags,
    body: post.body ?? '',
    pubDate: post.data.pubDate,
  };
}

const componentTexts = {
  searchPlaceholder: texts.searchPlaceholder,
  filterByTagButtonLabel: texts.filterByTagButtonLabel,
  noTagFound: texts.noTagFound,
  selectTagCommandPlaceholder: texts.selectTagCommandPlaceholder,
  allTagsLabel: texts.allTagsLabel,
  noPostsFound: texts.noPostsFound,
};

const pageTitle = texts.pageTitle;
const pageDescription = texts.pageDescription;
---

<BaseLayout {pageTitle} {pageDescription}>
  <div class="container mx-auto px-4 py-8 md:py-12">
    <Heading title={texts.title} description={texts.description} />

    <FilteredPostsList
      client:load
      allPosts={posts.map(transformPostForClientFilter)}
      texts={componentTexts}
      lang={lang}
      initialSearchQuery={initialSearchQuery}
      initialTag={initialTag}
    />

    <div
      id="blog-posts-container"
      class="grid md:grid-cols-2 lg:grid-cols-3 gap-8 mt-8"
    >
      {
        posts.length > 0 ? (
          posts.map((postEntry) => (
            <div class="blog-post-card-wrapper" data-post-id={postEntry.id}>
              <BlogPostCard post={postEntry} lang={lang} />
            </div>
          ))
        ) : (
          <EmptyState
            title={texts.noPostsFound}
            id="no-posts-initial-message"
            className="hidden"
          />
        )
      }
    </div>
    <EmptyState
      title={texts.noPostsFound}
      id="no-posts-filtered-message"
      className="hidden"
    />

    <script>
      import {
        filteredPostIdsAtom,
        filtersInitializedAtom,
      } from '../../../stores/blogFilterStore';

      const postsContainer = document.getElementById('blog-posts-container');
      const noPostsInitialMessage = document.getElementById(
        'no-posts-initial-message'
      );
      const noPostsFilteredMessage = document.getElementById(
        'no-posts-filtered-message'
      );
      const allPostCardWrappers = document.querySelectorAll(
        '.blog-post-card-wrapper'
      );

      function updateVisiblePosts() {
        if (!postsContainer || !noPostsFilteredMessage) return;

        const currentFilteredIds = filteredPostIdsAtom.get();
        const isFiltersInitialized = filtersInitializedAtom.get();
        let visibleCount = 0;

        allPostCardWrappers.forEach((wrapper) => {
          const postIdAttribute = wrapper.getAttribute('data-post-id');
          if (postIdAttribute !== null) {
            if (currentFilteredIds.includes(postIdAttribute)) {
              wrapper.classList.remove('hidden');
              visibleCount++;
            } else {
              wrapper.classList.add('hidden');
            }
          } else {
            wrapper.classList.add('hidden');
          }
        });

        if (noPostsInitialMessage) {
          noPostsInitialMessage.classList.add('hidden');
        }

        if (isFiltersInitialized) {
          if (visibleCount === 0) {
            postsContainer.style.display = 'none';
            noPostsFilteredMessage.classList.remove('hidden');
          } else {
            postsContainer.style.display = 'grid';
            noPostsFilteredMessage.classList.add('hidden');
          }
        }
      }

      const unsubscribePostIds =
        filteredPostIdsAtom.subscribe(updateVisiblePosts);

      const unsubscribeInitialized = filtersInitializedAtom.subscribe(
        (isInitialized: boolean) => {
          if (isInitialized) {
            updateVisiblePosts();
          }
        }
      );

      if (filtersInitializedAtom.get()) {
        updateVisiblePosts();
      }
    </script>
  </div>
</BaseLayout>
